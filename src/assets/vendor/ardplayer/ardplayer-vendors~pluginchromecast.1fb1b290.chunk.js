(window["webpackJsonpardplayer"] = window["webpackJsonpardplayer"] || []).push([["vendors~pluginchromecast"],{

/***/ "../ardplayer-addon-chromecast/src/ChromecastCtrl.ts":
/*!***********************************************************!*\
  !*** ../ardplayer-addon-chromecast/src/ChromecastCtrl.ts ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var ardplayer_core_app_controller_AbstractPlayerCtrl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ardplayer-core/app/controller/AbstractPlayerCtrl */ \"./app/controller/AbstractPlayerCtrl.ts\");\n/* harmony import */ var emap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! emap */ \"../emap/js/emap.js\");\n/* harmony import */ var emap__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(emap__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var ardplayer_core_app_utils_Storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ardplayer-core/app/utils/Storage */ \"./app/utils/Storage.ts\");\n/* harmony import */ var ardplayer_core_app_model_PlayerModel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ardplayer-core/app/model/PlayerModel */ \"./app/model/PlayerModel.ts\");\n/* harmony import */ var ardplayer_core_app_player_Player__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ardplayer-core/app/player/Player */ \"./app/player/Player.ts\");\n/* harmony import */ var ardplayer_core_app_controller_PlayerPixelController__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ardplayer-core/app/controller/PlayerPixelController */ \"./app/controller/PlayerPixelController.ts\");\n/* harmony import */ var ardplayer_core_app_utils_Utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ardplayer-core/app/utils/Utils */ \"./app/utils/Utils.ts\");\n/* harmony import */ var ardplayer_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ardplayer-core */ \"./app/index.ts\");\n\n\n\n\n\n\n\n\n\nclass ChromecastCtrl extends ardplayer_core_app_controller_AbstractPlayerCtrl__WEBPACK_IMPORTED_MODULE_0__[\"AbstractPlayerCtrl\"] {\n  constructor() {\n    super(...arguments);\n    this.lastState = '';\n    this.currentMediaStream = null;\n    this.currentTime = 0;\n    this.dvrTime = 0;\n    this.dvrLeft = 0;\n    this.dvrRight = 0;\n  }\n  /**\r\n   * returns the current instance of the Cast Addon-Part.\r\n   */\n\n\n  get castAddon() {\n    var _a;\n\n    return (_a = this.player.addons.find(it => {\n      return it.ID === 'AddonChromecast';\n    })) !== null && _a !== void 0 ? _a : null;\n  }\n\n  removeEventListeners() {\n    super.removeEventListeners(); // remove UI block\n\n    this.vc.forceControlsVisible = false; // remove casting mode\n\n    this.vc.playerView.classList.remove('ardplayer-state-casting');\n  }\n\n  addEventListeners() {\n    // defaults\n    // hls.js state variables\n    this._dvrModeEnabled = false;\n    this._dvrWindow = 0;\n    this._dvrIsLive = false;\n    this.dvrTime = -1; // keep UI visible\n\n    this.vc.forceControlsVisible = true; // switch to casting mode (no fullscreen, audioframe in background..)\n\n    this.vc.playerView.classList.add('ardplayer-state-casting');\n    const addon = this.castAddon;\n    this.remotePlayer = addon.remotePlayer;\n    this.remotePlayerController = addon.remotePlayerController;\n    this.emap = new emap__WEBPACK_IMPORTED_MODULE_1___default.a();\n    this.emap.map(this.remotePlayerController, cast.framework.RemotePlayerEventType.CURRENT_TIME_CHANGED, this.onTimeUpdate, this);\n    this.emap.map(this.remotePlayerController, cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED, this.onStateChange, this);\n    this.emap.map(this.remotePlayerController, cast.framework.RemotePlayerEventType.DURATION_CHANGED, this.onDurationChange, this);\n    this.emap.map(this.remotePlayerController, cast.framework.RemotePlayerEventType.LIVE_SEEKABLE_RANGE_CHANGED, this.onLiveSeekableRangeChanged, this);\n    this.emap.map(this.player, ardplayer_core_app_controller_PlayerPixelController__WEBPACK_IMPORTED_MODULE_5__[\"PlayerPixelController\"].SUPER_SUBTITLE_ACTIVATION, this.onSubtitleActivation, this);\n    this.emap.map(this.player, ardplayer_core_app_controller_PlayerPixelController__WEBPACK_IMPORTED_MODULE_5__[\"PlayerPixelController\"].SUPER_SUBTITLE_DEACTIVATION, this.onSubtitleDeactivation, this); // IS_MEDIA_LOADED_CHANGED\n  }\n\n  onStateChange(event) {\n    this.log('statechange', event.value);\n\n    switch (event.value) {\n      case 'PLAYING':\n        this.onPlay();\n        break;\n\n      case 'PAUSED':\n        this.onPause(null);\n        break;\n\n      case 'BUFFERING':\n        this.bufferingEventHandler(true);\n        break;\n\n      case 'IDLE':\n        if (this.lastState === 'PLAYING') {\n          this.endEventHandler(null);\n        }\n\n        break;\n      // idle\n\n      default:\n        break;\n    }\n\n    this.lastState = event.value;\n  }\n\n  restartMedia() {\n    if (this.currentMediaStream !== null) {\n      this.loadStream(this.currentMediaStream);\n    }\n  }\n\n  setVolume(volume, preventCookie = false) {\n    if (volume >= 0 && volume <= 100) {\n      if (!preventCookie) {\n        ardplayer_core_app_utils_Storage__WEBPACK_IMPORTED_MODULE_2__[\"Storage\"].setVolume(this.player, volume);\n      }\n\n      if (this.remotePlayer && this.remotePlayerController) {\n        this.remotePlayer.volumeLevel = volume / 100;\n        this.remotePlayerController.setVolumeLevel();\n      }\n    }\n  }\n  /**\r\n   * Setzt den Mute-Zustand\r\n   * @param {boolean} muted\r\n   * @param {boolean} preventCookie - Ã„nderung nicht im Cookie hinterlegen\r\n   */\n\n\n  setMuted(muted, preventCookie = false) {\n    if (this.remotePlayer && this.remotePlayerController) {\n      if (this.remotePlayer.isMuted !== muted) {\n        this.remotePlayerController.muteOrUnmute();\n      }\n    }\n\n    if (!preventCookie) {\n      ardplayer_core_app_utils_Storage__WEBPACK_IMPORTED_MODULE_2__[\"Storage\"].setMuted(this.player, muted);\n    }\n  }\n\n  onDurationChange(event) {\n    this._duration = event.value;\n    this._ready = true;\n  }\n\n  getDuration() {\n    if (this._dvrModeEnabled) {\n      return this._dvrWindow;\n    }\n\n    return this._duration;\n  }\n\n  onTimeUpdate(event) {\n    this.currentTime = event.value;\n  }\n\n  getCurrentTime() {\n    var _a, _b, _c;\n\n    if (this._pendingSeek > 0) {\n      return this._pendingSeek;\n    }\n\n    if (this._dvrModeEnabled) {\n      return this.dvrTime;\n    }\n\n    return (_c = (_b = (_a = this.remotePlayer) === null || _a === void 0 ? void 0 : _a.currentTime) !== null && _b !== void 0 ? _b : this.currentTime) !== null && _c !== void 0 ? _c : 0;\n  }\n  /**\r\n   * Chromecast Event on Seekable Range Changed\r\n   * @param event\r\n   */\n\n\n  onLiveSeekableRangeChanged(event) {\n    var _a, _b;\n\n    this._dvrModeEnabled = event.value && event.value.end > 0;\n\n    if (event.value) {\n      this.dvrLeft = event.value.start;\n      this.dvrRight = event.value.end;\n    }\n\n    this._dvrWindow = this.dvrRight - this.dvrLeft;\n    this.dvrTime = ((_b = (_a = this.remotePlayer) === null || _a === void 0 ? void 0 : _a.currentTime) !== null && _b !== void 0 ? _b : 0) - this.dvrLeft;\n    this.updateDVRValues();\n  }\n\n  updateDVRValues() {\n    this._dvrIsLive = this.currentTime >= this.getDuration();\n    this.onDVRCallback(this._dvrModeEnabled, this._dvrWindow, this._dvrIsLive);\n  }\n\n  play() {\n    var _a;\n\n    (_a = this.remotePlayerController) === null || _a === void 0 ? void 0 : _a.playOrPause();\n  }\n\n  pause() {\n    var _a;\n\n    (_a = this.remotePlayerController) === null || _a === void 0 ? void 0 : _a.playOrPause();\n  }\n\n  loadStream(mediaStream) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n\n    this.log('loadStream()'); // hide posterframe\n\n    this.player.viewCtrl.hidePosterFrame(); // reset media state\n\n    this.model.playstate = ardplayer_core_app_model_PlayerModel__WEBPACK_IMPORTED_MODULE_3__[\"PlayerModel\"].PLAYSTATE_UNSPECIFIED;\n    this.currentMediaStream = mediaStream;\n    const live = this.mc.isLive; // fixme test with multi players\n\n    this.stopOtherPlayingPlayers(); // Notify plugins\n\n    this.player.loop.dispatchEvent(ardplayer_core_app_player_Player__WEBPACK_IMPORTED_MODULE_4__[\"Player\"].EVENT_LOAD_STREAM, {\n      mediaStream\n    }); // restore possible last position\n\n    this._pendingSeek = this.model.time;\n\n    if (!this._pendingSeek && !this.mc.isLive) {\n      let beginOffset = this.pc.generic.vodInitialPlayheadSeconds;\n\n      if (beginOffset <= 0) {\n        beginOffset = this.pc.generic.vodStartSeconds;\n      }\n\n      this._pendingSeek = beginOffset;\n    }\n\n    const vttTracks = [];\n    this.mc.subtitles.map(it => {\n      return Object.assign({}, it, {\n        sources: it.sources.find(source => source.kind === \"webvtt\"\n        /* WEB_VTT */\n        )\n      });\n    }).filter(it => {\n      var _a, _b;\n\n      return ((_b = (_a = it.sources) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0;\n    }).forEach((vttElement, index) => {\n      var _a;\n\n      const subtitle = new chrome.cast.media.Track(index, chrome.cast.media.TrackType.TEXT); // simply take first source, we checked the type above\n\n      let url = String((_a = vttElement.sources[0].url) !== null && _a !== void 0 ? _a : '');\n\n      if (url.startsWith('//')) {\n        // if we're relative to local protocol always upgrade to https\n        url = `https:${url}`;\n      }\n\n      subtitle.trackContentId = url;\n      subtitle.trackContentType = 'text/vtt';\n      subtitle.subtype = chrome.cast.media.TextTrackType.SUBTITLES;\n      subtitle.name = `${Object(ardplayer_core_app_utils_Utils__WEBPACK_IMPORTED_MODULE_6__[\"getLanguageName\"])(vttElement.languageCode)}${vttElement.kind === \"simple-language\"\n      /* SIMPLE_LANGUAGE */\n      ? ' - Einfache Sprache' : ''}`;\n      subtitle.language = vttElement.languageCode;\n      subtitle.customData = {};\n      vttTracks.push(subtitle);\n    });\n    const mediaInfo = new chrome.cast.media.MediaInfo(mediaStream.url, mediaStream.mimeType);\n    mediaInfo.tracks = vttTracks;\n    mediaInfo.streamType = live ? chrome.cast.media.StreamType.LIVE : chrome.cast.media.StreamType.BUFFERED;\n    mediaInfo.duration = live ? -1 : (_a = this.mc.meta.durationSeconds) !== null && _a !== void 0 ? _a : 0; // fixme last duration?\n\n    if (this.player.isAudio) {\n      mediaInfo.metadata = new chrome.cast.media.MusicTrackMediaMetadata();\n      mediaInfo.metadata.songName = (_b = this.mc.meta.title) !== null && _b !== void 0 ? _b : '';\n      mediaInfo.metadata.title = (_c = this.mc.meta.title) !== null && _c !== void 0 ? _c : '';\n      mediaInfo.metadata.albumName = (_f = (_e = (_d = this.mc.meta.seriesTitle) !== null && _d !== void 0 ? _d : this.mc.meta.subHeading) !== null && _e !== void 0 ? _e : this.mc.meta.synopsis) !== null && _f !== void 0 ? _f : '';\n\n      if (!Object(ardplayer_core_app_utils_Utils__WEBPACK_IMPORTED_MODULE_6__[\"isBlank\"])((_g = this.mc.meta.publicationService) === null || _g === void 0 ? void 0 : _g.name)) {\n        mediaInfo.metadata.albumArtist = (_h = this.mc.meta.publicationService) === null || _h === void 0 ? void 0 : _h.name;\n      }\n\n      if (!Object(ardplayer_core_app_utils_Utils__WEBPACK_IMPORTED_MODULE_6__[\"isBlank\"])(this.mc.meta.broadcastedOnDateTime)) {\n        mediaInfo.metadata.releaseDate = this.mc.meta.broadcastedOnDateTime;\n      }\n    } else {\n      mediaInfo.metadata = new chrome.cast.media.MovieMediaMetadata();\n      mediaInfo.metadata.title = (_j = this.mc.meta.title) !== null && _j !== void 0 ? _j : '';\n      mediaInfo.metadata.subtitle = (_m = (_l = (_k = this.mc.meta.seriesTitle) !== null && _k !== void 0 ? _k : this.mc.meta.subHeading) !== null && _l !== void 0 ? _l : this.mc.meta.synopsis) !== null && _m !== void 0 ? _m : '';\n\n      if (!Object(ardplayer_core_app_utils_Utils__WEBPACK_IMPORTED_MODULE_6__[\"isBlank\"])((_o = this.mc.meta.publicationService) === null || _o === void 0 ? void 0 : _o.name)) {\n        mediaInfo.metadata.studio = (_p = this.mc.meta.publicationService) === null || _p === void 0 ? void 0 : _p.name;\n      }\n\n      if (!Object(ardplayer_core_app_utils_Utils__WEBPACK_IMPORTED_MODULE_6__[\"isBlank\"])(this.mc.meta.broadcastedOnDateTime)) {\n        mediaInfo.metadata.releaseDate = this.mc.meta.broadcastedOnDateTime;\n      }\n    }\n\n    mediaInfo.metadata.images = this.mc.meta.images.map(it => {\n      return {\n        url: new URL(it.url, document.baseURI).href\n      };\n    });\n    const request = new chrome.cast.media.LoadRequest(mediaInfo);\n    (_q = cast.framework.CastContext.getInstance().getCurrentSession()) === null || _q === void 0 ? void 0 : _q.loadMedia(request).then(() => {\n      try {\n        this.player.checkState();\n      } catch (e) {\n        ardplayer_core__WEBPACK_IMPORTED_MODULE_7__[\"console\"].warn('aborting async', e);\n        return;\n      }\n\n      if (ardplayer_core_app_utils_Storage__WEBPACK_IMPORTED_MODULE_2__[\"Storage\"].subtitleEnabled(this.player)) {\n        this.setSubtitles(true);\n      }\n\n      this._ready = true;\n      this.evalInitialSeek();\n    }, () => ardplayer_core__WEBPACK_IMPORTED_MODULE_7__[\"console\"].error);\n  }\n\n  onSubtitleActivation() {\n    this.setSubtitles(true);\n  }\n\n  onSubtitleDeactivation() {\n    this.setSubtitles(false);\n  }\n\n  setSubtitles(enabled) {\n    var _a;\n\n    try {\n      const media = (_a = cast.framework.CastContext.getInstance().getCurrentSession()) === null || _a === void 0 ? void 0 : _a.getMediaSession();\n      const activeTrackIds = enabled ? [0] : [];\n      const tracksInfoRequest = new chrome.cast.media.EditTracksInfoRequest(activeTrackIds);\n      media === null || media === void 0 ? void 0 : media.editTracksInfo(tracksInfoRequest, () => {}, () => ardplayer_core__WEBPACK_IMPORTED_MODULE_7__[\"console\"].error);\n    } catch (exc) {\n      ardplayer_core__WEBPACK_IMPORTED_MODULE_7__[\"console\"].error(exc);\n    }\n  }\n\n  setCurrentTime(seconds, preventPlay = false, preventSeek = false, isSubclipSeek = false) {\n    if (this.remotePlayer && this.remotePlayerController && this.remotePlayer.canSeek) {\n      let performSeekToTime = Math.min(seconds, this.getDuration() - 0.1);\n\n      if (this._dvrModeEnabled) {\n        performSeekToTime = this.dvrLeft + seconds;\n        this.dvrTime = seconds;\n      } // this.log('setRemotePosition: [seconds]' + seconds, '[perform]', performSeekToTime);\n\n\n      this.remotePlayer.currentTime = performSeekToTime;\n      this.remotePlayerController.seek();\n      this.onStateChange({\n        value: 'BUFFERING'\n      }); // update Player UI, compensate override\n\n      super.setCurrentTime(seconds, preventPlay, true, isSubclipSeek);\n    }\n  }\n\n  updateTicker() {\n    if (this._dvrModeEnabled) {\n      switch (this.model.playstate) {\n        case ardplayer_core_app_model_PlayerModel__WEBPACK_IMPORTED_MODULE_3__[\"PlayerModel\"].PLAYSTATE_PAUSED:\n        case ardplayer_core_app_model_PlayerModel__WEBPACK_IMPORTED_MODULE_3__[\"PlayerModel\"].PLAYSTATE_PLAYING:\n          this.dvrLeft += 0.5;\n          this.dvrRight += 0.5;\n          break;\n        // scroll to right on pause?\n      }\n    }\n\n    super.updateTicker();\n  }\n\n  canSeek() {\n    return true;\n  }\n\n  getClassTypeString() {\n    return 'ChromecastCtrl';\n  }\n\n  addSource(stream) {\n    ardplayer_core__WEBPACK_IMPORTED_MODULE_7__[\"console\"].warn('addSource not implemented for Chromecast.');\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ChromecastCtrl);\n\n//# sourceURL=webpack://ardplayer/../ardplayer-addon-chromecast/src/ChromecastCtrl.ts?");

/***/ }),

/***/ "../ardplayer-addon-chromecast/src/PluginChromecastLibrary.ts":
/*!********************************************************************!*\
  !*** ../ardplayer-addon-chromecast/src/PluginChromecastLibrary.ts ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ChromecastCtrl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ChromecastCtrl */ \"../ardplayer-addon-chromecast/src/ChromecastCtrl.ts\");\n/* harmony import */ var ardplayer_core_app_extensions_plugins_MediaElementGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ardplayer-core/app/extensions/plugins/MediaElementGenerator */ \"./app/extensions/plugins/MediaElementGenerator.ts\");\n\n\nconst exports = {\n  Generator: ardplayer_core_app_extensions_plugins_MediaElementGenerator__WEBPACK_IMPORTED_MODULE_1__[\"DefaultMediaElementGenerator\"],\n  Controller: _ChromecastCtrl__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (exports);\n\n//# sourceURL=webpack://ardplayer/../ardplayer-addon-chromecast/src/PluginChromecastLibrary.ts?");

/***/ })

}]);