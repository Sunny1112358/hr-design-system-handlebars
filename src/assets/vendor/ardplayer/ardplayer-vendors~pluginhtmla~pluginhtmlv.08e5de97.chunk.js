(window["webpackJsonpardplayer"] = window["webpackJsonpardplayer"] || []).push([["vendors~pluginhtmla~pluginhtmlv"],{

/***/ "./app/utils/DVRUtil.ts":
/*!******************************!*\
  !*** ./app/utils/DVRUtil.ts ***!
  \******************************/
/*! exports provided: DVRUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DVRUtil\", function() { return DVRUtil; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ \"./app/utils/Utils.ts\");\n/* harmony import */ var emap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! emap */ \"../emap/js/emap.js\");\n/* harmony import */ var emap__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(emap__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Decorators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Decorators */ \"./app/utils/Decorators.ts\");\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _DVRUtil_masterUrl, _DVRUtil_masterManifest, _DVRUtil_segmentsManifest, _DVRUtil_manifestTimeout, _DVRUtil_lastDispatched;\n\n\n\n\nvar DVRUtil = class DVRUtil {\n  constructor(player, mediaElement, playerCtrl) {\n    this.hasDvr = false;\n    this.endTime = 0;\n    this.lastSegmentIndex = 0;\n    this.lastCurrentTime = 0;\n    this.lastDuration = 0;\n    this.dvrDuration = 0;\n    this.durationDelta = 0;\n    this.segmentDuration = 0;\n    this.liveSyncDurationCount = 3;\n    this.lastMediaSequence = null;\n    this.lastNumSegments = 0;\n    this.growingWindow = false;\n    this.initialTimestamp = 0;\n    this.dvrData = null;\n    this.dvrToDateSync = null;\n\n    _DVRUtil_masterUrl.set(this, '');\n\n    _DVRUtil_masterManifest.set(this, null);\n\n    _DVRUtil_segmentsManifest.set(this, null);\n\n    _DVRUtil_manifestTimeout.set(this, -1);\n\n    _DVRUtil_lastDispatched.set(this, null);\n\n    this.player = player;\n    this.mediaElement = mediaElement;\n    this.playerCtrl = playerCtrl;\n    this.emap = new emap__WEBPACK_IMPORTED_MODULE_1___default.a();\n  }\n\n  initStream(masterUrl) {\n    __classPrivateFieldSet(this, _DVRUtil_masterUrl, masterUrl, \"f\");\n\n    this.loadManifest(masterUrl, true, manifest => {\n      __classPrivateFieldSet(this, _DVRUtil_masterManifest, manifest, \"f\");\n\n      this.loadManifest(this.getSegmentsUrl(), false, manifest => {\n        __classPrivateFieldSet(this, _DVRUtil_segmentsManifest, manifest, \"f\");\n\n        this.hasDvr = manifest.isLive || manifest.duration > 60; // init endTime -> endTime is growing over time (not constantly equal to manifest.duration)\n\n        this.endTime = manifest.duration;\n        this.dvrDuration = manifest.duration;\n        this.segmentDuration = manifest.targetDuration;\n        this.hasDvr = manifest.isLive || manifest.duration > 60;\n        this.initialTimestamp = Math.floor(Date.now() / 1000);\n        this.lastSegmentIndex = manifest.segmentsList[manifest.segmentsList.length - 1].index;\n        this.emap.map(this.mediaElement, 'timeupdate', this.handleVideoTimeUpdate, this);\n        this.emap.map(this.mediaElement, 'durationchange', this.handleVideoDurationChange, this);\n        this.dispatchDVRInfo();\n        this.startManifestTimeout();\n      });\n    });\n  }\n\n  getSegmentsUrl() {\n    var _a, _b;\n\n    var url = (_b = (_a = __classPrivateFieldGet(this, _DVRUtil_masterManifest, \"f\")) === null || _a === void 0 ? void 0 : _a.streams[0].url) !== null && _b !== void 0 ? _b : '';\n\n    if (Object(_Utils__WEBPACK_IMPORTED_MODULE_0__[\"isBlank\"])(__classPrivateFieldGet(this, _DVRUtil_masterUrl, \"f\")) || /^http/.test(url)) {\n      return url;\n    }\n\n    if (!url.includes('/')) {\n      var parts = __classPrivateFieldGet(this, _DVRUtil_masterUrl, \"f\").split('/');\n\n      parts.pop();\n      return parts.join('/') + '/' + url;\n    }\n\n    var urlObj = new URL(__classPrivateFieldGet(this, _DVRUtil_masterUrl, \"f\"));\n    return urlObj.protocol + \"//\" + urlObj.host + url;\n  }\n\n  loadManifest(url, isMaster, callback) {\n    fetch(url).then(response => __awaiter(this, void 0, void 0, function* () {\n      return yield response.text();\n    })).then(text => {\n      try {\n        this.player.checkState();\n      } catch (e) {\n        console.warn('aborting async', e);\n        return;\n      }\n\n      var parser = new M3u8Parser(text);\n\n      if (callback) {\n        callback(parser.parse());\n      }\n    }).catch(_ => {\n      var _a, _b, _c, _d;\n\n      try {\n        this.player.checkState();\n      } catch (e) {\n        console.warn('aborting async', e);\n        return;\n      }\n\n      if (!isMaster) {\n        // @ts-expect-error\n        if (((_b = (_a = __classPrivateFieldGet(this, _DVRUtil_masterManifest, \"f\")) === null || _a === void 0 ? void 0 : _a.streams) === null || _b === void 0 ? void 0 : _b.length) > 1) {\n          (_d = (_c = __classPrivateFieldGet(this, _DVRUtil_masterManifest, \"f\")) === null || _c === void 0 ? void 0 : _c.streams) === null || _d === void 0 ? void 0 : _d.shift();\n          this.loadManifest(this.getSegmentsUrl(), false, callback);\n        } else {\n          this.hasDvr = false;\n          clearTimeout(__classPrivateFieldGet(this, _DVRUtil_manifestTimeout, \"f\"));\n        }\n      } else {\n        this.hasDvr = false;\n        clearTimeout(__classPrivateFieldGet(this, _DVRUtil_manifestTimeout, \"f\"));\n      }\n    });\n  }\n\n  startManifestTimeout() {\n    var _a, _b;\n\n    clearTimeout(__classPrivateFieldGet(this, _DVRUtil_manifestTimeout, \"f\"));\n\n    __classPrivateFieldSet(this, _DVRUtil_manifestTimeout, this.player.safeTimeout(() => {\n      this.loadManifest(this.getSegmentsUrl(), false, manifest => {\n        __classPrivateFieldSet(this, _DVRUtil_segmentsManifest, manifest, \"f\");\n\n        this.hasDvr = manifest.isLive || manifest.duration > 60;\n        var endTime = this.endTime;\n        var i, segment;\n\n        for (i = 0; i < manifest.segmentsList.length; ++i) {\n          segment = manifest.segmentsList[i];\n\n          if (segment.index > this.lastSegmentIndex) {\n            this.endTime += segment.duration;\n          }\n        }\n\n        this.lastSegmentIndex = manifest.segmentsList[manifest.segmentsList.length - 1].index;\n\n        if (this.endTime !== endTime) {\n          this.handleVideoDurationChange();\n        }\n\n        this.setDvrToDateSync();\n        this.startManifestTimeout();\n      });\n    }, ((_b = (_a = __classPrivateFieldGet(this, _DVRUtil_segmentsManifest, \"f\")) === null || _a === void 0 ? void 0 : _a.targetDuration) !== null && _b !== void 0 ? _b : 5) * 1000), \"f\");\n  }\n\n  dispatchDVRInfo() {\n    if (__classPrivateFieldGet(this, _DVRUtil_segmentsManifest, \"f\") !== null) {\n      if (this.lastCurrentTime < Math.round(this.getVideoTime())) {\n        ++this.durationDelta;\n      }\n\n      var start = __classPrivateFieldGet(this, _DVRUtil_segmentsManifest, \"f\").firstProgTime;\n\n      var end = __classPrivateFieldGet(this, _DVRUtil_segmentsManifest, \"f\").lastProgTime;\n\n      if (this.lastMediaSequence == null) {\n        this.lastMediaSequence = __classPrivateFieldGet(this, _DVRUtil_segmentsManifest, \"f\").mediaSequence;\n        this.lastNumSegments = __classPrivateFieldGet(this, _DVRUtil_segmentsManifest, \"f\").numSegments;\n      } else {\n        if (this.lastMediaSequence === __classPrivateFieldGet(this, _DVRUtil_segmentsManifest, \"f\").mediaSequence) {\n          if (__classPrivateFieldGet(this, _DVRUtil_segmentsManifest, \"f\").numSegments > this.lastNumSegments) {\n            this.lastNumSegments = __classPrivateFieldGet(this, _DVRUtil_segmentsManifest, \"f\").numSegments;\n            this.growingWindow = true;\n          }\n        } else {\n          this.growingWindow = false;\n        }\n      }\n\n      if (this.growingWindow) {\n        this.dvrDuration = (end - start) / 1000;\n        this.endTime = this.dvrDuration;\n      }\n\n      var dvrDuration = this.dvrDuration - this.segmentDuration * this.liveSyncDurationCount;\n      var duration = dvrDuration + this.durationDelta;\n      var time = this.getVideoTime();\n      var isLive = duration - time <= this.segmentDuration * this.liveSyncDurationCount + this.segmentDuration;\n      var liveTimeStamp;\n\n      if (this.growingWindow) {\n        liveTimeStamp = start / 1000 + this.mediaElement.currentTime;\n      } else {\n        liveTimeStamp = this.initialTimestamp - (this.dvrDuration - this.segmentDuration * this.liveSyncDurationCount) + this.mediaElement.currentTime;\n      }\n\n      this.dvrData = {\n        dvrDuration: dvrDuration,\n        currentTime: time,\n        duration: duration,\n        liveTimestamp: liveTimeStamp,\n        start: start,\n        end: end,\n        isLive: isLive\n      };\n      this.setDvrToDateSync();\n    }\n  }\n\n  setDvrToDateSync() {\n    var _a, _b;\n\n    var start = (_b = (_a = __classPrivateFieldGet(this, _DVRUtil_segmentsManifest, \"f\")) === null || _a === void 0 ? void 0 : _a.firstProgTime) !== null && _b !== void 0 ? _b : 0;\n    var time = this.getVideoTime();\n    var liveTimeStamp;\n\n    if (this.growingWindow) {\n      liveTimeStamp = start / 1000 + this.mediaElement.currentTime;\n    } else {\n      liveTimeStamp = this.initialTimestamp - this.dvrDuration + this.mediaElement.currentTime;\n    }\n\n    this.dvrToDateSync = {\n      rel: time,\n      real: liveTimeStamp * 1000,\n      at: Date.now()\n    };\n    this.onDVRCallback();\n  }\n\n  getVideoTime() {\n    return Math.max(0, this.mediaElement.currentTime - (this.endTime - this.dvrDuration));\n  }\n\n  getVideoDuration() {\n    return this.endTime;\n  }\n\n  getCurrentDuration() {\n    return this.dvrDuration - this.segmentDuration * this.liveSyncDurationCount + this.durationDelta;\n  }\n\n  seek(time) {\n    this.mediaElement.currentTime = Math.max(1, Math.min(this.endTime, time)) + this.endTime - this.dvrDuration;\n  }\n\n  seekToLive() {\n    // directly notify about buffering\n    this.playerCtrl.bufferingEventHandler(true); // reload source to get back to live location\n\n    this.mediaElement.load();\n    this.initStream(__classPrivateFieldGet(this, _DVRUtil_masterUrl, \"f\"));\n  }\n\n  onDVRCallback() {\n    var _a, _b, _c, _d, _e;\n\n    if (__classPrivateFieldGet(this, _DVRUtil_lastDispatched, \"f\") !== null && __classPrivateFieldGet(this, _DVRUtil_lastDispatched, \"f\").dvrEnabled === this.hasDvr && __classPrivateFieldGet(this, _DVRUtil_lastDispatched, \"f\").dvrDuration === ((_a = this.dvrData) === null || _a === void 0 ? void 0 : _a.dvrDuration) && __classPrivateFieldGet(this, _DVRUtil_lastDispatched, \"f\").dvrIsLive === this.dvrData.isLive) {\n      return; // do not repeat same data over and over again\n    }\n\n    __classPrivateFieldSet(this, _DVRUtil_lastDispatched, {\n      dvrEnabled: this.hasDvr,\n      dvrDuration: (_b = this.dvrData) === null || _b === void 0 ? void 0 : _b.dvrDuration,\n      dvrIsLive: (_c = this.dvrData) === null || _c === void 0 ? void 0 : _c.isLive\n    }, \"f\");\n\n    this.playerCtrl.onDVRCallback(this.hasDvr, (_d = this.dvrData) === null || _d === void 0 ? void 0 : _d.dvrDuration, (_e = this.dvrData) === null || _e === void 0 ? void 0 : _e.isLive);\n  }\n\n  dispose() {\n    this.emap.all();\n    clearTimeout(__classPrivateFieldGet(this, _DVRUtil_manifestTimeout, \"f\"));\n  }\n\n  handleVideoTimeUpdate() {\n    this.dispatchDVRInfo();\n    this.lastCurrentTime = Math.round(this.getVideoTime());\n  }\n\n  handleVideoDurationChange() {\n    var duration = Math.round(this.endTime);\n    this.durationDelta = 0;\n    /* some browsers reports several duration change events with almost the same value */\n\n    if (this.lastDuration === duration) {\n      return;\n    }\n\n    this.lastDuration = duration;\n    this.dispatchDVRInfo();\n  }\n\n};\n_DVRUtil_masterUrl = new WeakMap(), _DVRUtil_masterManifest = new WeakMap(), _DVRUtil_segmentsManifest = new WeakMap(), _DVRUtil_manifestTimeout = new WeakMap(), _DVRUtil_lastDispatched = new WeakMap();\nDVRUtil = __decorate([_Decorators__WEBPACK_IMPORTED_MODULE_2__[\"sealed\"]], DVRUtil);\n // Adapted from: https://github.com/meisterplayer/media-nativehls/blob/develop/src/js/utils/M3u8Parser.js\n\nfunction extractKeyInfo(keyLine) {\n  return keyLine.replace('#EXT-X-KEY:', '') // All key value pairs are split with a ,\n  .split(',').reduce((result, keyValString) => {\n    // We only use the first equal sign per string\n    // Otherwise we might split something in an URL.\n    var firstEqualIndex = keyValString.indexOf('='); // Retrieve key value pairs.\n\n    var key = keyValString.substring(0, firstEqualIndex);\n    var val = keyValString.substring(firstEqualIndex + 1); // The values are displayed like: \"\"value\"\", so we remove the extra pair of \"\".\n    // @ts-expect-error\n\n    result[key] = val.replace(/\"/g, '');\n    return result;\n  }, {});\n}\n\nclass M3u8Parser {\n  constructor(text) {\n    this.text = text;\n  }\n\n  parse() {\n    var lines = this.text.split('\\n');\n    var result = {\n      keyInfo: {},\n      firstProgTime: 0,\n      lastProgTime: 0,\n      streams: [],\n      segments: {},\n      segmentsList: [],\n      mediaSequence: 0,\n      duration: 0,\n      isLive: true,\n      targetDuration: 0,\n      numSegments: 0\n    };\n    var nextLineIsStream = false;\n    var previousMediaNumber = result.mediaSequence;\n    var streamInfo = {};\n    var firstProgTime = 0;\n    var lastProgTime = 0;\n    var t;\n    lines.forEach(line => {\n      var _a, _b, _c, _d, _e;\n\n      if (nextLineIsStream) {\n        streamInfo.url = line;\n        result.streams.push(streamInfo);\n        streamInfo = {};\n        nextLineIsStream = false;\n      }\n\n      if (line.indexOf('#EXT-X-PROGRAM-DATE-TIME:') === 0) {\n        t = new Date(line.substr('#EXT-X-PROGRAM-DATE-TIME:'.length)).getTime();\n\n        if (firstProgTime === 0) {\n          firstProgTime = t;\n        }\n\n        lastProgTime = new Date(line.substr('#EXT-X-PROGRAM-DATE-TIME:'.length)).getTime();\n      }\n\n      if (line.startsWith('#EXT-X-STREAM-INF')) {\n        nextLineIsStream = true;\n      }\n\n      if (line.startsWith('#EXT-X-ENDLIST')) {\n        result.isLive = false;\n      }\n\n      if (line.startsWith('#EXT-X-KEY')) {\n        // Extracting the URI out of the key section\n        result.keyInfo = extractKeyInfo(line);\n      } // #EXT-X-TARGETDURATION:10\n\n\n      var matchTargetDuration = /^#EXT-X-TARGETDURATION:?(-?[0-9.]*)?/.exec(line);\n\n      if (matchTargetDuration === null || matchTargetDuration === void 0 ? void 0 : matchTargetDuration[1]) {\n        result.targetDuration = parseInt(matchTargetDuration[1], 10);\n      } // #EXT-X-STREAM-INF:PROGRAM-ID=1,RESOLUTION=600x338,BANDWIDTH=712704\n\n\n      var matchBandwidth = /^#EXT-X-STREAM-INF:.*BANDWIDTH=(\\d*)?/.exec(line);\n\n      if (((_a = matchBandwidth === null || matchBandwidth === void 0 ? void 0 : matchBandwidth[1]) !== null && _a !== void 0 ? _a : '') !== '') {\n        streamInfo.bandwidth = matchBandwidth === null || matchBandwidth === void 0 ? void 0 : matchBandwidth[1];\n      }\n\n      var matchResolution = /^#EXT-X-STREAM-INF:.*RESOLUTION=(\\d*x\\d*)?/.exec(line);\n\n      if (((_b = matchResolution === null || matchResolution === void 0 ? void 0 : matchResolution[1]) !== null && _b !== void 0 ? _b : '') !== '') {\n        var resolutions = matchResolution === null || matchResolution === void 0 ? void 0 : matchResolution[1].split('x');\n\n        if (!resolutions || resolutions.length < 2) {\n          streamInfo.resolution = {\n            width: 0,\n            height: 0\n          };\n        } else {\n          streamInfo.resolution = {\n            width: parseInt(resolutions[0], 10),\n            height: parseInt(resolutions[1], 10)\n          };\n        }\n      }\n\n      var matchInfo = /^#EXTINF:?([0-9.]*)?,?(.*)?/.exec(line);\n\n      if (((_c = matchInfo === null || matchInfo === void 0 ? void 0 : matchInfo[1]) !== null && _c !== void 0 ? _c : '') !== '') {\n        t = parseFloat((_d = matchInfo === null || matchInfo === void 0 ? void 0 : matchInfo[1]) !== null && _d !== void 0 ? _d : ''); // @ts-expect-error\n\n        result.segments[previousMediaNumber] = t;\n        result.segmentsList.push({\n          index: previousMediaNumber,\n          duration: t\n        });\n        previousMediaNumber += 1;\n        result.duration += t;\n        ++result.numSegments;\n\n        if (lastProgTime !== 0) {\n          lastProgTime += t * 1000;\n        }\n      }\n\n      var matchMediaSequence = /^#EXT-X-MEDIA-SEQUENCE:?(-?[0-9.]*)?/.exec(line);\n      var seq = (_e = matchMediaSequence === null || matchMediaSequence === void 0 ? void 0 : matchMediaSequence[1]) !== null && _e !== void 0 ? _e : '';\n\n      if (seq !== '') {\n        result.mediaSequence = parseInt(seq, 10);\n        previousMediaNumber = parseInt(seq, 10);\n      }\n    });\n    result.firstProgTime = firstProgTime;\n    result.lastProgTime = lastProgTime;\n    return result;\n  }\n\n}\n\n//# sourceURL=webpack://ardplayer/./app/utils/DVRUtil.ts?");

/***/ })

}]);