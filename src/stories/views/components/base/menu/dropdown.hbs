<nav x-data="contentNavigationHandler()" x-init="init()"
    class="w-full {{_componentClass}} {{_modifier}} " 
    id="dropdown--{{nextRandom}}"
    tabindex="0"
    role="navigation"
    aria-labelledby="dropdown__label--{{getRandom}}">

    <span id="o-dropdown__label--{{getRandom}}" class="hidden">{{defaultIfEmpty _hiddenNavigationLabel "Unternavigation"}}</span>
    <div class="" {{!-- :class="{{this.isDropdown}} == true ? 'bg-blue-accented !p-4 ' : '' " --}}>
        <div x-show="shouldDropdownBeShown({{_teasersize}},{{this.isDropdown}},{{this.isMixed}})" class="flex w-full h-8 p-2 overflow-hidden bg-white border rounded border-blue-congress whitespace-nowrap text-blue-congress fill-congress"  >
            <span class="text-base self-center w-full {{_componentClass}}__button-text">
                    {{_buttonText}}
            </span>
            <div class="flex self-center justify-end w-auto px-2 py-1">
                <span x-on:click="open = ! open" :class="open ? 'hidden' : ''"  class="flex justify-end o-dropdown__button-icon {{_componentClass}}__button-icon -open">
                {{~> components/base/image/icon _icon=(defaultIfEmpty _iconOpen "arrow-down") _addClass="flex justify-end h-4 w-4" _iconmap="icons"~}}
                </span>

                <span x-on:click="open = ! open" :class="open ? '' : 'hidden'" class="o-dropdown__button-icon {{_componentClass}}__button-icon -close">
                {{~> components/base/image/icon _icon=(defaultIfEmpty _iconClose "arrow-up") _addClass="h-4 w-4" _iconmap="icons"~}}
                </span>
            </div>
        </div>        
    
    </div>
    <div x-show="shouldContentBeShown({{_teasersize}},{{this.isDropdown}},{{this.isMixed}})" aria-haspopup="true" class="md:relative md:left-0 md:h-auto md:overflow-visible {{_componentClass}}__content">
       {{> @partial-block }}
    </div>
    
</nav>
<script type="text/javascript">
document.addEventListener('alpine:init', () => {
    Alpine.data('contentNavigationHandler', () =>({    
        open: false,
        
        init(){  
        },

        shouldDropdownBeShown(teasersize,isDropdown,isMixed){  
            if (isDropdown){
                
                    return true
                 

            } 

            if (isMixed) {
                console.log(this.$screen('sm'))
                if (teasersize === 100 || teasersize === 66 ) {
                    if (this.$screen('lg')) return false
                    if (this.$screen('md')) return false
                    if (this.$screen('xs')) return true
                } else if (teasersize === 33 || teasersize === 25 || teasersize === 50) { 
                    return true 
                }

                // return (this.$screen('md') || this.$screen('lg')) ? true : open
            }


        },

        shouldContentBeShown(teasersize,isDropdown,isMixed){
            console.log(teasersize)
            console.log(isDropdown)
            console.log(isMixed)

            if (isDropdown){                   
                return this.open                
            } 
            
            if (isMixed) {
                console.log(teasersize)
                if (teasersize === 100 || teasersize === 66 ) {
                    if (this.$screen('lg')) return true
                    if (this.$screen('md')) return true
                    if (this.$screen('xs')) return this.open
                } else if (teasersize === 33 || teasersize === 25 || teasersize === 50) { 
                    return this.open
                }
            }

            return false 
        }
    }))   
})
</script>